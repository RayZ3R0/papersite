name: Test Suite

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
        # Three different node versions for compatibility testing

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run all tests
        run: npm run test:ci

      # Device Testing
      - name: Run device compatibility tests
        run: npm run test:devices

      # Performance Testing
      - name: Run performance tests
        run: npm run test:performance

      # Network Testing
      - name: Run network condition tests
        run: npm run test:network

      # Touch Target Testing
      - name: Run touch target validation
        run: npm run test:touch

      # Accessibility Testing
      - name: Run accessibility tests
        run: npm run test:a11y

      # Offline Capability Testing
      - name: Run offline functionality tests
        run: npm run test:offline

      # Generate and save test report
      - name: Generate test report
        run: npm run prepare-test-report

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report-${{ matrix.node-version }}
          path: test-reports/

      # If any test fails, create an issue
      - name: Create issue on test failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'test-reports/test-report-latest.json';

            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Test Failure: ${new Date().toISOString()}`,
                body: `
                # Test Failure Report
                
                Node Version: ${process.version}
                
                ## Summary
                - Total Tests: ${report.totalTests}
                - Failed Tests: ${report.failedTests}
                - Critical Issues: ${report.summary.criticalIssues}
                
                ## Failed Tests
                ${report.results.filter(r => !r.passed)
                  .map(r => `- ${r.name}: ${r.errors.join(', ')}`)
                  .join('\n')}
                
                ## Performance Metrics
                ${JSON.stringify(report.performance, null, 2)}
                
                [View full report in artifacts]
                `
              });
            }

  # Separate job for E2E tests
  e2e:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # Install Playwright browsers
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # Run E2E tests
      - name: Run E2E tests
        run: npm run test:e2e

      # Upload E2E test results
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

  # Deploy preview if all tests pass
  preview:
    needs: [test, e2e]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

    # Add your deployment steps here
    # For example, deploying to Vercel Preview
